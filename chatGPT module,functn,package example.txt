Sure, let me explain each of these concepts in Python with simple examples:

1. **Function:**
   A function in Python is a reusable block of code that performs a specific task. Functions help in organizing code into manageable and reusable parts. You can define your own functions or use built-in functions.

   ```python
   # Example of a simple function
   def greet(name):
       """This function greets the person passed in as a parameter."""
       print(f"Hello, {name}!")

   # Call the function
   greet("Alice")
   ```

   In this example, `greet` is a function that takes a parameter (`name`) and prints a greeting using that parameter.

2. **Module:**
   A module in Python is a file containing Python definitions and statements. It can include functions, classes, and variables. Modules help in organizing code into separate files for better maintainability and reusability.

   ```python
   # Example of a simple module
   # Save this code in a file named 'mymodule.py'

   def add(x, y):
       """This function adds two numbers."""
       return x + y

   def subtract(x, y):
       """This function subtracts two numbers."""
       return x - y
   ```

   Now, you can use this module in another Python script:

   ```python
   # Example of using a module
   import mymodule

   result_add = mymodule.add(5, 3)
   result_subtract = mymodule.subtract(5, 3)

   print(f"Addition: {result_add}")
   print(f"Subtraction: {result_subtract}")
   ```

   In this example, `mymodule` is a module containing two functions (`add` and `subtract`), and we import and use it in another script.

3. **Package:**
   A package in Python is a way of organizing related modules into a directory hierarchy. It helps in avoiding naming conflicts and makes it easier to manage and distribute code.

   Example directory structure:

   ```
   mypackage/
   ├── __init__.py
   ├── module1.py
   └── module2.py
   ```

   The `__init__.py` file indicates that the directory should be treated as a package. Each module in the package can be imported and used in other scripts.

   ```python
   # Example of using a package
   from mypackage import module1, module2

   result_module1 = module1.multiply(4, 5)
   result_module2 = module2.divide(10, 2)

   print(f"Multiplication: {result_module1}")
   print(f"Division: {result_module2}")
   ```

   In this example, `mypackage` is a package containing two modules (`module1` and `module2`). The package is imported, and modules are used in another script.

These concepts help in organizing and structuring code in a way that is modular, reusable, and easy to maintain.